esphome:
  name: bthome_decoder

wifi:
  fast_connect: true
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  on_connect:
  - http_request.get:
      url: http://ipecho.net/plain
      capture_response: true
      on_response:
        then:
          - lambda: |-
              if (!body.empty()) {
                id(public_ip).publish_state(body);  // Use 'body' directly
              } else {
                ESP_LOGW("wifi", "Failed to fetch public IP.");
              }


esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:
  level: DEBUG

api:

ota:
  platform: esphome


mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: true
  discovery_prefix: homeassistant
  id: mqtt_client

http_request:
  id: http_client


preferences:
  flash_write_interval: 10min

external_components:
  - source: github://Fabian-Schmidt/esphome-victron_ble

esp32_ble_tracker:
  scan_parameters:
    active: true
    duration: 15s  # Reduced for better efficiency
    interval: 100ms
    window: 99ms
  on_ble_advertise:
#    - mac_address:
#        - XX:XX:XX:XX:XX:XX
#        - XX:XX:XX:XX:XX:XX
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "New BLE device");
            ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
            ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
            for (auto uuid : x.get_service_uuids()) {
                ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
            }
            ESP_LOGD("ble_adv", "  Advertised service data:");
            for (auto data : x.get_service_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
            ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
            for (auto data : x.get_manufacturer_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
  
  on_ble_service_data_advertise:
#  - mac_address: 38:1F:8D:FD:91:5A # BTH01-915A
    service_uuid: FCD2
    then:
      - lambda: |-
          auto service_data = x.get_service_datas()          


 
globals:
  - id: device_count
    type: int
    initial_value: '0'

output:
  - platform: gpio
    pin: GPIO2
    id: blueLED
    inverted: false

interval:
  - interval: 3s
    then:
      - output.turn_on: blueLED
      - delay: 150ms
      - output.turn_off: blueLED


text_sensor:
  - platform: template
    name: "Public IP"
    id: public_ip
    entity_category: diagnostic

sensor:
  - platform: uptime
    name: Uptime
    update_interval: 60s

  - platform: internal_temperature
    name: "Internal Temperature"
  - platform: template
    name: "BLE Sensor"
    id: ble_sensor

victron_ble:
  - id: MySmartSolar1
    mac_address: "d3149369dd42"
    bindkey: "c982879851b676d9c3d9b5933d78cc6b"
esphome:
  name: bthome_decoder
  platformio_options:
    board_build.f_cpu: 80000000L

external_components:
  - source: github://Fabian-Schmidt/esphome-victron_ble

preferences:
  flash_write_interval: 999min

wifi:
  fast_connect: true
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  on_connect:
    - http_request.get:
        url: http://ipecho.net/plain
        capture_response: true
        on_response:
          then:
            - lambda: |-
                id(public_ip).publish_state(body);

mqtt:
  id: mqtt_client
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password
  discovery: true
  discovery_prefix: homeassistant
  topic_prefix: bthome_decoder

esp32:
  board: esp32dev
  framework:
    type: esp-idf

http_request:

interval:
  - interval: 3s
    then:
      - output.turn_on: blueLED
      - delay: 150ms
      - output.turn_off: blueLED

output:
  - platform: gpio
    pin: GPIO2
    id: blueLED
    inverted: false

logger:
  level: DEBUG

api:

ota:
  platform: esphome

esp32_ble_tracker:
  scan_parameters:
    active: false
    duration: 33s
    interval: 100ms
    window: 99ms
  on_ble_service_data_advertise:
    - mac_address: 38:1F:8D:58:11:57
      service_uuid: FCD2
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "BT2BEE-BTH01 data: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x ", x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9],x[10],x[11],x[12],x[13],x[14],x[15],x[16]);
            float temp = (((x[6] & 0xff) | (x[7] << 8)))/100.0;
            float hum = (((x[9] & 0xff) | (x[10] << 8)))/100.0;
            float volt = (((x[12] & 0xff) | (x[13] << 8)))/1000.0;
            if(x[5]==0x02 && x[8]==0x03 && x[11]==0x0C && temp>-40 && temp<100 && hum>0 && hum<101 && volt>0 && volt<4) {
              id(mqtt_client).publish("bthome_decoder/BT2BEE-BTH01/temperature", to_string(temp));
              id(mqtt_client).publish("bthome_decoder/BT2BEE-BTH01/humidity", to_string(hum));
              id(mqtt_client).publish("bthome_decoder/BT2BEE-BTH01/voltage", to_string(volt));
            }
    - mac_address: 38:1F:8D:93:A1:2D
      service_uuid: FCD2
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "TH05 data: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x ", x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9],x[10],x[11],x[12],x[13],x[14],x[15],x[16]);
            float temp = (((x[6] & 0xff) | (x[7] << 8)))/100.0;
            float hum = (((x[9] & 0xff) | (x[10] << 8)))/100.0;
            float volt = (((x[12] & 0xff) | (x[13] << 8)))/1000.0;
            if(x[5]==0x02 && x[8]==0x03 && x[11]==0x0C && temp>-40 && temp<100 && hum>0 && hum<101 && volt>0 && volt<4) {
              id(mqtt_client).publish("bthome_decoder/TH05/temperature", to_string(temp));
              id(mqtt_client).publish("bthome_decoder/TH05/humidity", to_string(hum));
              id(mqtt_client).publish("bthome_decoder/TH05/voltage", to_string(volt));
            }

text_sensor:
  - platform: template
    name: "Public IP"
    id: public_ip
    entity_category: "diagnostic"
  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    format:
      separator: " "
esphome:
  name: bthome_decoder
  platformio_options:
    board_build.f_cpu: 80000000L

external_components:
  - source: github://Fabian-Schmidt/esphome-victron_ble

preferences:
  flash_write_interval: 999min

wifi:
  fast_connect: true
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  on_connect:
    - http_request.get:
        url: http://ipecho.net/plain
        capture_response: true
        on_response:
          then:
            - lambda: |-
                id(public_ip).publish_state(body);

esp32:
  board: esp32dev
  framework:
    type: esp-idf

http_request:

interval:
  - interval: 3s
    then:
      - output.turn_on: blueLED
      - delay: 150ms
      - output.turn_off: blueLED

output:
  - platform: gpio
    pin: GPIO2
    id: blueLED
    inverted: false

logger:
  level: DEBUG

api:
ota:
  platform: esphome

mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: true
  discovery_prefix: homeassistant

esp32_ble_tracker:
  scan_parameters:
    active: false
    duration: 33s
    interval: 100ms
    window: 99ms
  on_ble_service_data_advertise:
    - then:
        - lambda: |-
            std::string mac = x.get_address().str();
            float temp = (((x[6] & 0xff) | (x[7] & 0xff) << 8)) / 100.0;
            float hum = (((x[9] & 0xff) | (x[10] & 0xff) << 8)) / 100.0;
            float volt = (((x[12] & 0xff) | (x[13] & 0xff) << 8)) / 1000.0;

            if (x[5]==0x02 && x[8]==0x03 && x[11]==0x0C && temp > -40 && temp < 100 && hum >= 0 && hum <= 100 && volt > 0 && volt < 4) {
              std::string id_base;
              bool found = false;
              for (int i = 0; i < id(device_count); i++) {
                if (id(device_mac)[i] == mac) {
                  id_base = id(device_name)[i];
                  found = true;
                  break;
                }
              }
              if (!found && id(device_count) < 10) {
                id(device_mac)[id(device_count)] = mac;
                id(device_name)[id(device_count)] = "device" + std::to_string(id(device_count));
                id_base = id(device_name)[id(device_count)];
                id(device_count)++;
              }
              if (id_base.length() > 0) {
                ESPHome::mqtt::publish("homeassistant/sensor/" + id_base + "_temperature/state", to_string(temp));
                ESPHome::mqtt::publish("homeassistant/sensor/" + id_base + "_humidity/state", to_string(hum));
                ESPHome::mqtt::publish("homeassistant/sensor/" + id_base + "_voltage/state", to_string(volt));
              }
            }

globals:
  - id: device_count
    type: int
    initial_value: '0'
  - id: device_mac
    type: std::string[10]
    restore_value: no
  - id: device_name
    type: std::string[10]
    restore_value: no

sensor:
  - platform: uptime
    name: Uptime
    update_interval: 60s
  - platform: internal_temperature
    name: "Internal Temperature"

binary_sensor:
  - platform: victron_ble
    victron_ble_id: MySmartSolar1
    name: "MPPT is in Fault state"
    type: DEVICE_STATE_FAULT
  - platform: victron_ble
    victron_ble_id: MySmartSolar1
    name: "MPPT has Error"
    type: CHARGER_ERROR

text_sensor:
  - platform: victron_ble
    victron_ble_id: MySmartSolar1
    name: "MPPT state"
    type: DEVICE_STATE
  - platform: victron_ble
    victron_ble_id: MySmartSolar1
    name: "MPPT Error reason"
    type: CHARGER_ERROR
  - platform: template
    name: "Public IP"
    id: public_ip
    entity_category: "diagnostic"

victron_ble:
  - id: MySmartSolar1
    mac_address: "d3149369dd42"
    bindkey: "c982879851b676d9c3d9b5933d78cc6b"
